# ansible-pull setup
#
# on remote hosts, set up ansible to run periodically using the latest code
# from a particular checkout, in pull based fashion, inverting Ansible's
# usual push-based operating mode.
---
- name: Install ansible
  dnf:
    name: ansible, git, dbus-tools
  tags: packages

- name: Create unit directory
  file:
    path: /usr/local/lib/systemd/system/
    state: directory
  tags: config

- name: Install ansible-pull-init.timer
  copy:
    dest: /usr/local/lib/systemd/system/ansible-pull-init.timer
    content: |
      [Timer]
      {{ schedule_init }}

      [Install]
      WantedBy=multi-user.target
  tags: config

- name: Install ansible-pull-repeat.timer
  copy:
    dest: /usr/local/lib/systemd/system/ansible-pull-repeat.timer
    content: |
      [Timer]
      {{ schedule_repeat }}

      [Install]
      WantedBy=multi-user.target
  tags: config

- name: Install ansible-pull-init.service
  copy:
    dest: /usr/local/lib/systemd/system/ansible-pull-init.service
    content: |
      [Unit]
      After=multi-user.target graphical.target
      Wants=network-online.target
      After=network-online.target
      Before=ansible-pull.service

      [Service]
      Type=oneshot
      ExecStart=ansible-pull -i localhost, -U {{ ansible_repo_url }} {% if pull_tags is defined and pull_tags %} -t {{ pull_tags }} {% endif %} all.yml
      Restart=on-failure
      RestartSec=5 min
  tags: config

- name: Install ansible-pull-repeat.service
  copy:
    dest: /usr/local/lib/systemd/system/ansible-pull-repeat.service
    content: |
      [Unit]
      After=multi-user.target graphical.target
      Wants=network-online.target
      After=network-online.target

      [Service]
      Type=oneshot
      ExecStart=ansible-pull -i localhost, -U {{ ansible_repo_url }} --only-if-changed {% if pull_tags is defined and pull_tags %} -t {{ pull_tags }} {% endif %} all.yml
      Restart=on-failure
      RestartSec=1 min
  tags: config

- name: Create override folder for ansible-pull.service
  file:
    path: /usr/local/lib/systemd/system/ansible-pull-.service.d
    state: directory
  tags: config

- name: Add ara config to ansible-pull
  copy:
    dest: /usr/local/lib/systemd/system/ansible-pull-.service.d/ara.conf
    content: |
      [Service]
      Environment=ARA_API_SERVER=http://aspp.uber.space:44040
      Environment=ARA_API_CLIENT=http
      # This should be set dynamically: python3 -m ara.setup.callback_plugins
      Environment=ANSIBLE_CALLBACK_PLUGINS=/usr/lib/python3.12/site-packages/ara/plugins/callback
  tags: config

- name: Enable ansible-pull-init.timer
  ansible.builtin.systemd_service:
    name: ansible-pull-init.timer
    enabled: "{{ ansible_pull_timer_enabled }}"
    daemon_reload: true
  tags: config

- name: Enable ansible-pull-repeat.timer
  ansible.builtin.systemd_service:
    name: ansible-pull-repeat.timer
    enabled: "{{ ansible_pull_timer_enabled }}"
    daemon_reload: true
  tags: config


- name: Enable ansible-pull-init.timer
  ansible.builtin.systemd_service:
    name: ansible-pull-init.timer
    state: "started"
  tags: config
  when: ansible_pull_timer_started

- name: Enable ansible-pull-repeat.timer
  ansible.builtin.systemd_service:
    name: ansible-pull-repeat.timer
    state: "started"
    daemon_reload: true
  tags: config
  when: ansible_pull_timer_started
